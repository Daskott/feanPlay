var app=angular.module("app",["ngRoute","ngCookies","firebase"]);angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","$location","UserService",function(e,t,r,o){e.currentUser=t.globals.currentUser,e.$on("login",function(){e.currentUser=t.globals.currentUser}),e.logout=function(){o.clearCredentials(),r.path("/"),e.currentUser=null}}]);var app=angular.module("app");app.controller("LoginCtrl",["$scope","$rootScope","$location","UserService",function(e,t,r,o){e.invalidLogin=!1,e.login=function(e,t){firebase.auth().signInWithEmailAndPassword(e,t).then(function(e){var t=firebase.auth().currentUser.getToken();console.log(t)})["catch"](function(e){var t=(e.code,e.message);console.log(t)})}}]);var app=angular.module("app");app.controller("PostsCtrl",["$scope","$firebaseArray","PostsService",function(e,t,r){var o=firebase.database().ref().child("posts"),a=["January","February","March","April","May","June","July","August","September","October","November","December"];e.posts=t(o),e.addPost=function(){var t=new Date,r=a[t.getMonth()+1],n=r+" "+t.getDate()+" "+t.getFullYear()+" - "+t.toLocaleTimeString();if(e.postBody){var s={username:e.currentUser.username,body:e.postBody,image:e.photo||"",time:n};o.push().set(s),e.postBody=null}}}]);var app=angular.module("app");app.service("PostsService",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(t){return e.post("/api/posts",t)}}]);var app=angular.module("app");app.controller("RegisterCtrl",["$scope","$location","UserService",function(e,t,r){e.register=function(e,r,o){e&&o&&r&&firebase.auth().createUserWithEmailAndPassword(r,o).then(function(e){console.log(e),t.path("/login")})["catch"](function(e){var t=(e.code,e.message);console.log(t)})}}]),function(){"use strict";function e(e,t){e.when("/home",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/",{controller:"LoginCtrl",templateUrl:"login.html"}).otherwise({redirectTo:"/"})}function t(e,t,r,o){e.globals=r.get("globals")||{},e.globals.currentUser&&(o.defaults.headers.common["x-auth"]=e.globals.currentUser.authdata),e.$on("$locationChangeStart",function(r,o,a){var n=-1===$.inArray(t.path(),["/","/register"]),s=e.globals.currentUser;n&&!s?t.path("/"):s&&t.path("/home")})}angular.module("app").config(e).run(t),e.$inject=["$routeProvider","$locationProvider"],t.$inject=["$rootScope","$location","$cookieStore","$http"]}();var app=angular.module("app");app.service("UserService",["$http","$rootScope","$cookieStore",function(e,t,r){var o=this;o.getUser=function(){return e.get("/api/users")},o.login=function(t,r){return e.post("/api/sessions",{username:t,password:r}).then(function(e){return o.token=e.data,o.setCredentials(o.token),o.getUser()})},o.register=function(t,r,o){return e.post("/api/users",{username:t,email:r,password:o})},o.setCredentials=function(o){var a=o;e.get("/api/users",{headers:{"x-auth":o}}).success(function(o){t.globals={currentUser:{username:o.username,email:o.email,authdata:a}},r.put("globals",t.globals),e.defaults.headers.common["x-auth"]=a})},o.clearCredentials=function(){t.globals={},r.remove("globals"),e.defaults.headers.common.Authorization=null}}]);
//# sourceMappingURL=data:application/json;base64,
