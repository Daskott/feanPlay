var app=angular.module("app",["ngRoute","ngCookies"]);angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","$location","UserService",function(o,e,t,n){o.currentUser=e.globals.currentUser,o.$on("login",function(){o.currentUser=e.globals.currentUser}),o.logout=function(){n.clearCredentials(),o.currentUser=null,t.path("/")}}]);var app=angular.module("app");app.controller("LoginCtrl",["$scope","$rootScope","$location","UserService",function(o,e,t,n){o.invalidLogin=!1,o.login=function(e,r){n.login(e,r).then(function(e){o.invalidLogin=!1,o.$emit("login"),t.path("/home")})["catch"](function(e){o.invalidLogin=!0,console.error("Login Error",e.status)})}}]);var app=angular.module("app");app.controller("PostsCtrl",["$scope","PostsService",function(o,e){e.fetch().success(function(e){o.posts=e}),o.addPost=function(){o.postBody&&e.create({body:o.postBody}).success(function(e){o.postBody=null})},o.$on("ws:new_post",function(e,t){console.log("GOT IT"),o.$apply(function(){o.posts.unshift(t)})})}]);var app=angular.module("app");app.service("PostsService",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(e){return o.post("/api/posts",e)}}]);var app=angular.module("app");app.controller("RegisterCtrl",["$scope","$location","UserService",function(o,e,t){o.register=function(o,n,r){o&&r&&n&&t.register(o,n,r).then(function(n){t.login(o,r),e.path("/login")})}}]),function(){"use strict";function o(o,e){o.when("/home",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/",{controller:"LoginCtrl",templateUrl:"login.html"}).otherwise({redirectTo:"/"})}function e(o,e,t,n){o.globals=t.get("globals")||{},o.globals.currentUser&&(console.log("hello"),n.defaults.headers.common["x-auth"]=o.globals.currentUser.authdata),o.$on("$locationChangeStart",function(t,n,r){var a=-1===$.inArray(e.path(),["/","/register"]),s=o.globals.currentUser;a&&!s?e.path("/"):s&&e.path("/home")})}angular.module("app").config(o).run(e),o.$inject=["$routeProvider","$locationProvider"],e.$inject=["$rootScope","$location","$cookieStore","$http"]}();var app=angular.module("app");app.service("UserService",["$http","$rootScope","$cookieStore",function(o,e,t){var n=this;n.getUser=function(){return o.get("/api/users")},n.login=function(e,t){return o.post("/api/sessions",{username:e,password:t}).then(function(o){return n.token=o.data,n.setCredentials(n.token),n.getUser()})},n.register=function(e,t,n){return o.post("/api/users",{username:e,email:t,password:n})},n.setCredentials=function(n){var r=n;o.get("/api/users",{headers:{"x-auth":n}}).success(function(n){e.globals={currentUser:{username:n.username,email:n.email,authdata:r}},t.put("globals",e.globals),o.defaults.headers.common["x-auth"]=r})},n.clearCredentials=function(){e.globals={},t.remove("globals"),o.defaults.headers.common.Authorization=null}}]);var app=angular.module("app"),addr="localhost";app.run(["$rootScope","$timeout",function(o,e){!function t(){var n="ws://"+addr+":5000",r=new WebSocket(n);r.onclose=function(o){console.log("WebSocket closed. Reconnecting..."),e(t,1e4)},r.onmessage=function(e){var t=JSON.parse(e.data);console.log("recieve broadcast"),o.$broadcast("ws:"+t.topic,t.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,
