var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,e){o.currentUser=e})}]);var app=angular.module("app");app.controller("LoginCtrl",["$scope","$location","UserService",function(o,t,e){o.login=function(n,r){e.login(n,r).then(function(e){console.log(e),o.$emit("login",e.data),t.path("/")})}}]);var app=angular.module("app");app.controller("PostsCtrl",["$scope","PostsService",function(o,t){t.fetch().success(function(t){o.posts=t}),o.addPost=function(){o.postBody&&t.create({body:o.postBody}).success(function(t){o.postBody=null})},o.$on("ws:new_post",function(t,e){console.log("GOT IT"),o.$apply(function(){o.posts.unshift(e)})})}]);var app=angular.module("app");app.service("PostsService",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]);var app=angular.module("app");app.controller("RegisterCtrl",["$scope","$location","UserService",function(o,t,e){o.register=function(o,n){e.register(o,n).then(function(r){console.log(o,n),e.login(o,n),t.path("/login"),console.log(r)})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]);var app=angular.module("app");app.service("UserService",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(e,n){return o.post("/api/sessions",{username:e,password:n}).then(function(e){return t.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,t.getUser()})},t.register=function(t,e){return o.post("/api/users",{username:t,password:e})}}]);var app=angular.module("app"),addr="localhost";app.run(["$rootScope","$timeout",function(o,t){!function e(){var n="ws://"+addr+":5000",r=new WebSocket(n);r.onclose=function(o){console.log("WebSocket closed. Reconnecting..."),t(e,1e4)},r.onmessage=function(t){var e=JSON.parse(t.data);console.log("recieve broadcast"),o.$broadcast("ws:"+e.topic,e.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,
